{"version":3,"sources":["components/dataHandler.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","flexDirection","card","display","background","color","details","content","padding","cover","minWidth","minHeight","controls","alignItems","paddingLeft","spacing","paddingBottom","payloadsList","width","maxWidth","position","overflow","maxHeight","DataHandler","classes","useQuery","gql","loading","error","data","Grid","container","className","launchesPast","map","mission_name","launch_date_local","launch_site","rocket","links","item","Card","CardMedia","lg","xs","component","image","flickr_images","title","CardContent","Typography","variant","slice","rocket_name","site_name_long","Paper","style","backgroundColor","List","second_stage","payloads","payload","ListItem","payload_type","payload_mass_kg","reduce","a","b","imagesStyles","height","client","ApolloClient","uri","wrapper","App","Box","id","Container","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"o2BAiBA,IAAMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,EACVC,cAAe,UAEjBC,KAAM,CACJC,QAAS,OACTC,WAAY,UACZC,MAAO,SAETC,QAAS,CACPH,QAAS,OACTF,cAAe,UAEjBM,QAAS,CACPC,QAAS,EACTH,MAAO,SAETI,MAAO,CACLC,SAAU,IACVC,UAAW,KAEbC,SAAU,CACRT,QAAS,OACTU,WAAY,SACZC,YAAahB,EAAMiB,QAAQ,GAC3BC,cAAelB,EAAMiB,QAAQ,IAE/BE,aAAc,CACZC,MAAO,OACPC,SAAU,IACVC,SAAU,WACVC,SAAU,OACVC,UAAW,SA6HAC,EAzHK,WAClB,IAAMC,EAAU5B,IADQ,EAGS6B,YAASC,YAAA,MAAlCC,EAHgB,EAGhBA,QAASC,EAHO,EAGPA,MAAOC,EAHA,EAGAA,KAwBxB,OAAIF,EAAgB,yCAChBC,EAAc,uCAGhB,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAWR,EAAQzB,KAAMgB,QAAS,GAC/Cc,EAAKI,aAAaC,KACjB,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,kBAAmBC,EAApC,EAAoCA,YAAaC,EAAjD,EAAiDA,OAAQC,EAAzD,EAAyDA,MAAzD,OACE,kBAACT,EAAA,EAAD,CAAMU,MAAI,GACR,kBAACC,EAAA,EAAD,CAAMT,UAAWR,EAAQtB,MACvB,kBAAC4B,EAAA,EAAD,CAAMC,WAAS,EAAChB,QAAS,GACvB,kBAAC2B,EAAA,EAAD,CACEF,MAAI,EACJG,GAAI,EACJC,GAAI,GACJC,UAAWf,IACXE,UAAWR,EAAQf,MACnBqC,MAAOP,EAAMQ,cAAc,GAC3BC,MAAK,gBAAWT,EAAMQ,cAAc,MAEtC,kBAACE,EAAA,EAAD,CACET,MAAI,EACJG,GAAI,EACJC,GAAI,GACJC,UAAWf,IACXE,UAAWR,EAAQjB,SAEnB,kBAAC2C,EAAA,EAAD,CAAYL,UAAU,KAAKM,QAAQ,MAAnC,YACW,gCAAShB,IAEpB,kBAACe,EAAA,EAAD,CAAYC,QAAQ,aAApB,kBACkB,IAChB,gCAASf,EAAkBgB,MAAM,EAAG,MAEtC,kBAACF,EAAA,EAAD,CAAYC,QAAQ,aAApB,WACU,gCAASb,EAAOe,cAE1B,kBAACH,EAAA,EAAD,CAAYC,QAAQ,aAApB,SACQ,gCAASd,EAAYiB,kBAG/B,kBAACL,EAAA,EAAD,CACET,MAAI,EACJG,GAAI,EACJC,GAAI,GACJC,UAAWf,IACXE,UAAWR,EAAQjB,SAEnB,kBAAC2C,EAAA,EAAD,CAAYL,UAAU,KAAKM,QAAQ,MAAnC,gBAGA,kBAACI,EAAA,EAAD,CAAOC,MAAO,CAAEC,gBAAiB,cAC/B,kBAACC,EAAA,EAAD,CAAM1B,UAAWR,EAAQP,cACtBqB,EAAOqB,aAAaC,SAAS1B,KAAI,SAAA2B,GAAO,OACvC,kBAACC,EAAA,EAAD,KACE,kBAACZ,EAAA,EAAD,CAAYL,UAAU,IAAIM,QAAQ,KAAlC,IAEGU,EAAQE,aACP,IACAF,EAAQG,gBACR,aAOd,kBAACf,EAAA,EAAD,CACET,MAAI,EACJG,GAAI,EACJC,GAAI,GACJC,UAAWf,IACXE,UAAWR,EAAQjB,SAEnB,kBAAC2C,EAAA,EAAD,CAAYL,UAAU,KAAKM,QAAQ,MAAnC,eAGA,kBAACD,EAAA,EAAD,CAAYL,UAAU,IAAIM,QAAQ,KAE9Bb,EAAOqB,aAAaC,SAASK,QAAO,SAACC,EAAGC,GAAJ,MAAW,CAC7CH,gBAAiBE,EAAEF,gBAAkBG,EAAEH,oBACrCA,gBAEN,8C,gBCxJdI,G,MAAe,CACnBlD,MAAO,QACPmD,OAAQ,UAGJC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,qCAGD5E,EAAYC,YAAW,CAC3B4E,QAAS,GAGT1C,UAAW,KA2BE2C,EArBH,WACV,IAAMlD,EAAU5B,IAEhB,OACE,kBAAC,IAAD,CAAgB0E,OAAQA,GACtB,kBAACK,EAAA,EAAD,CAAK3C,UAAWR,EAAQiD,QAAS5B,UAAU,OAEzC,kBAAC8B,EAAA,EAAD,CAAK9B,UAAU,MAAM+B,GAAG,UACxB,kBAACD,EAAA,EAAD,CAAK9B,UAAU,MAAM+B,GAAG,WACxB,kBAACD,EAAA,EAAD,CAAK9B,UAAU,MAAM+B,GAAG,WACxB,kBAACC,EAAA,EAAD,CAAW7C,UAAWR,EAAQO,UAAWZ,SAAS,MAChD,wBAAIqC,MAAO,CAAEnD,MAAO,OAAQyE,UAAW,WAAvC,2BAGA,kBAAC,EAAD,CAAaV,aAAcA,QChCjBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.18c62b27.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { gql } from \"apollo-boost\";\r\n\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport \"./dataHandler.scss\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    flexDirection: \"column\"\r\n  },\r\n  card: {\r\n    display: \"flex\",\r\n    background: \"#212121\",\r\n    color: \"white\"\r\n  },\r\n  details: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n  },\r\n  content: {\r\n    padding: 3,\r\n    color: \"white\"\r\n  },\r\n  cover: {\r\n    minWidth: 300,\r\n    minHeight: 300\r\n  },\r\n  controls: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    paddingLeft: theme.spacing(1),\r\n    paddingBottom: theme.spacing(1)\r\n  },\r\n  payloadsList: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    position: \"relative\",\r\n    overflow: \"auto\",\r\n    maxHeight: 200\r\n  }\r\n}));\r\n\r\nconst DataHandler = () => {\r\n  const classes = useStyles();\r\n\r\n  const { loading, error, data } = useQuery(gql`\r\n    {\r\n      launchesPast(limit: 10) {\r\n        mission_name\r\n        launch_date_local\r\n        launch_site {\r\n          site_name_long\r\n        }\r\n        rocket {\r\n          rocket_name\r\n          second_stage {\r\n            payloads {\r\n              payload_type\r\n              payload_mass_kg\r\n            }\r\n          }\r\n        }\r\n        links {\r\n          flickr_images\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n\r\n  return (\r\n    <Grid container className={classes.root} spacing={2}>\r\n      {data.launchesPast.map(\r\n        ({ mission_name, launch_date_local, launch_site, rocket, links }) => (\r\n          <Grid item>\r\n            <Card className={classes.card}>\r\n              <Grid container spacing={2}>\r\n                <CardMedia\r\n                  item\r\n                  lg={3}\r\n                  xs={12}\r\n                  component={Grid}\r\n                  className={classes.cover}\r\n                  image={links.flickr_images[0]}\r\n                  title={`image ${links.flickr_images[0]}`}\r\n                />\r\n                <CardContent\r\n                  item\r\n                  lg={3}\r\n                  xs={12}\r\n                  component={Grid}\r\n                  className={classes.content}\r\n                >\r\n                  <Typography component=\"h5\" variant=\"h5\">\r\n                    Mission: <strong>{mission_name}</strong>\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\">\r\n                    Date of launch:{\" \"}\r\n                    <strong>{launch_date_local.slice(0, 10)}</strong>\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\">\r\n                    Rocket: <strong>{rocket.rocket_name}</strong>\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\">\r\n                    Base: <strong>{launch_site.site_name_long}</strong>\r\n                  </Typography>\r\n                </CardContent>\r\n                <CardContent\r\n                  item\r\n                  lg={3}\r\n                  xs={12}\r\n                  component={Grid}\r\n                  className={classes.content}\r\n                >\r\n                  <Typography component=\"h5\" variant=\"h5\">\r\n                    Rocket load:\r\n                  </Typography>\r\n                  <Paper style={{ backgroundColor: \"lightgray\" }}>\r\n                    <List className={classes.payloadsList}>\r\n                      {rocket.second_stage.payloads.map(payload => (\r\n                        <ListItem>\r\n                          <Typography component=\"p\" variant=\"p\">\r\n                            -\r\n                            {payload.payload_type +\r\n                              \" \" +\r\n                              payload.payload_mass_kg +\r\n                              \"kg\"}\r\n                          </Typography>\r\n                        </ListItem>\r\n                      ))}\r\n                    </List>\r\n                  </Paper>\r\n                </CardContent>\r\n                <CardContent\r\n                  item\r\n                  lg={3} ///Repair, should be 3. Maybe use spacing instead of margin (list)\r\n                  xs={12}\r\n                  component={Grid}\r\n                  className={classes.content}\r\n                >\r\n                  <Typography component=\"h5\" variant=\"h5\">\r\n                    Total load:\r\n                  </Typography>\r\n                  <Typography component=\"p\" variant=\"p\">\r\n                    {\r\n                      rocket.second_stage.payloads.reduce((a, b) => ({\r\n                        payload_mass_kg: a.payload_mass_kg + b.payload_mass_kg\r\n                      })).payload_mass_kg\r\n                    }\r\n                    <span>kg</span>\r\n                  </Typography>\r\n                </CardContent>\r\n              </Grid>\r\n            </Card>\r\n          </Grid>\r\n        )\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DataHandler;\r\n\r\n// <div className=\"app__text\" key={mission_name}>\r\n//   <p>\r\n//     Misja o kryptonimie: <strong>{mission_name}</strong>\r\n//   </p>\r\n//   <p>\r\n//     Data wystrza≈Çy rakiety:{\" \"}\r\n//     <strong>{launch_date_local.slice(0, 10)}</strong>\r\n//   </p>\r\n//   <p>\r\n//     Baza misji: <strong>{launch_site.site_name_long}</strong>\r\n//   </p>\r\n//   <p>\r\n//     Rakieta o nazwie: <strong>{rocket.rocket_name}</strong>, z ≈Çadunkiem:\r\n//   </p>\r\n// <ul>\r\n//   {rocket.second_stage.payloads.map(payload => (\r\n//     <li>\r\n//       {payload.payload_type +\r\n//         \" o masie: \" +\r\n//         payload.payload_mass_kg +\r\n//         \"kg\"}\r\n//     </li>\r\n//   ))}\r\n// </ul>\r\n//   <p>\r\n//     <span>Ca≈Çkowita masa pakunku: </span>\r\n// {\r\n//   rocket.second_stage.payloads.reduce((a, b) => ({\r\n//     payload_mass_kg: a.payload_mass_kg + b.payload_mass_kg\r\n//   })).payload_mass_kg\r\n// }\r\n// <span>kg</span>\r\n//   </p>\r\n//   {links.flickr_images.map(image => (\r\n//     <img src={image} style={props.imagesStyles} alt=\"\" />\r\n//   ))}\r\n//   <br/>\r\n// </div>\r\n","import React from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport DataHandler from \"./components/dataHandler\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport \"./App.scss\";\r\n\r\nconst imagesStyles = {\r\n  width: \"450px\",\r\n  height: \"400px\"\r\n};\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"https://api.spacex.land/graphql/\"\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n  wrapper: {\r\n    // background: \"gray\"\r\n  },\r\n  container: {\r\n    // background: \"lightgreen\",\r\n    // borderTop: \"1px solid black\",\r\n  }\r\n});\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Box className={classes.wrapper} component=\"div\">\r\n        {/* Inserted high in app, in places where data is already needed, preferred outside react router wrapper */}\r\n        <Box component=\"div\" id=\"stars\"></Box>\r\n        <Box component=\"div\" id=\"stars2\"></Box>\r\n        <Box component=\"div\" id=\"stars3\"></Box>\r\n        <Container className={classes.container} maxWidth=\"lg\">\r\n          <h2 style={{ color: \"#FFF\", textAlign: \"center\" }}>\r\n            Last 10 Spacex missions\r\n          </h2>\r\n          <DataHandler imagesStyles={imagesStyles} />\r\n        </Container>\r\n      </Box>\r\n    </ApolloProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}